<?php

/**
 * Implements hook_menu().
 */
function chillco_islandora_solution_pack_multi_image_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/multi_image_container'] = array(
    'title' => 'Image Container',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'chillco_islandora_solution_pack_multi_image_manage_images_menu',
    'page arguments' => array(2),
    'access callback' => 'islandora_paged_content_manage_pages_access_callback',
    'access arguments' => array(2, array('islandora:chillco_isp_multi_image_container_cmodel')),
    'file' => 'includes/manage_images.inc',
  );
  $items['islandora/object/%islandora_object/manage/multi_image_container/ingest_multi'] = array(
      'title' => 'Add Multiple Images',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('chillco_islandora_solution_pack_multi_image_ingest_multiple_items_form', 2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(FEDORA_INGEST, 2),
      'file' => 'includes/manage_images.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function chillco_islandora_solution_pack_multi_image_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'islandora_paged_content_manage_pages_sequences_form' || $form_id == 'islandora_paged_content_manage_pages_delete_form') {
    $object = $form_state['object'];
    if ($object->models[0] == 'islandora:chillco_isp_multi_image_container_cmodel') {
      $form['#submit'][] = 'chillco_islandora_solution_pack_large_image_paged_batch_submit';
    }
  }
}

/**
 * Update the paged content thumbnail provided from a form.
 */
function chillco_islandora_solution_pack_large_image_paged_batch_submit($form, &$form_state) {
  $object = $form_state['object'];
  chillco_islandora_solution_pack_large_image_update_container_asset($object);
}

/**
 * Implements hook_islandora_required_objects().
 */
function chillco_islandora_solution_pack_multi_image_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'chillco_islandora_solution_pack_multi_image');
  // Image Container Content Model.
  $multi_image_container_content_model = $connection->repository->constructObject('islandora:chillco_isp_multi_image_container_cmodel');
  $multi_image_container_content_model->owner = 'fedoraAdmin';
  $multi_image_container_content_model->label = 'Chillco Islandora Multi Image Container Content Model';
  $multi_image_container_content_model->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $multi_image_container_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/chillco_islandora_solution_pack_multi_image_container_ds_composite_model.xml", FALSE);
  $multi_image_container_content_model->ingestDatastream($datastream);

  // Image Item Content Model.
  $multi_image_item_content_model = $connection->repository->constructObject('islandora:chillco_isp_multi_image_item_cmodel');
  $multi_image_item_content_model->owner = 'fedoraAdmin';
  $multi_image_item_content_model->label = 'Chillco Islandora Multi Image Item Content Model';
  $multi_image_item_content_model->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $multi_image_item_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/data/datastreams/chillco_islandora_solution_pack_multi_image_item_ds_composite_model.xml", FALSE);
  $multi_image_item_content_model->ingestDatastream($datastream);

  return array(
    'chillco_islandora_solution_pack_multi_image' => array(
      'title' => 'Chillco Islandora Solution Pack - Multi Image',
      'objects' => array(
        $multi_image_container_content_model,
        $multi_image_item_content_model,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function chillco_islandora_solution_pack_multi_image_islandora_content_model_forms_form_associations() {
  return array(
    'chillco_islandora_solution_pack_multi_image_mods_form' => array(
      'content_model' => 'islandora:chillco_isp_multi_image_container_cmodel',
      'form_name' => 'Chillco Large image MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_large_image_islandora_chillco_isp_multi_image_item_cmodel_OBJ_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  chillco_islandora_solution_pack_large_image_islandora_chillco_isp_large_image_cmodel_islandora_object_ingested($object);
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_large_image_islandora_chillco_isp_multi_image_item_cmodel_IMAGE_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  chillco_islandora_solution_pack_large_image_islandora_chillco_isp_large_image_cmodel_islandora_object_ingested($object);
  $parent_pid = islandora_paged_content_get_relationship($object->relationships, FEDORA_RELS_EXT_URI, 'isMemberOf', NULL);
  $parent = islandora_object_load($parent_pid);
  if ($parent) {
    chillco_islandora_solution_pack_large_image_update_container_asset($parent);
  }
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function chillco_islandora_solution_pack_large_image_islandora_chillco_isp_multi_image_container_cmodel_IMAGE_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  chillco_islandora_solution_pack_large_image_islandora_chillco_isp_large_image_cmodel_islandora_object_ingested($object);
}

/**
 * Updates the given paged content's thumbnail from the first page in the paged
 * content.
 *
 * @param AbstractObject $object
 *   The paged content object to update.
 *
 * @return bool
 *   TRUE on success, FALSE otherwise.
 */
function chillco_islandora_solution_pack_large_image_update_container_asset(AbstractObject $object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  static $current_pid;
  if (!islandora_paged_content_can_update_paged_content_thumbnail($object)) {
    return FALSE;
  }
  $images = islandora_paged_content_get_pages($object);
  $image = array_shift($images);
  if ($current_pid !== $image['pid']) {
    $current_pid = $image['pid'];
    $image = islandora_object_load($current_pid);
    $mime_detector = new MimeDetect();
    $dsid = 'IMAGE';
    $ext = $mime_detector->getExtension($dsid->mimeType);
    $file = drupal_realpath('temporary://{$page->id}_{dsid}.{$ext}');
    $image[$dsid]->getContent($file);
    $ret = islandora_paged_content_update_datastream($object,
      $file,
      $dsid,
      "IMAGE FROM {$image->label}");
    file_unmanaged_delete($file);
    return $ret;
  }
}
